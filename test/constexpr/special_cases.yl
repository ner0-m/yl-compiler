// RUN: yl %s -res-dump 2>&1 | FileCheck %s --match-full-lines
fn binaryLhsKnown(y: number): number {
    var x: number = 2.1;

    return (0.0 && y) + (1.0 || x);
}
// CHECK:       ResolvedBinaryOperator: '+'
// CHECK-NEXT:       | value: 1
// CHECK-NEXT:         ResolvedGroupingExpr:
// CHECK-NEXT:           ResolvedBinaryOperator: '&&'
// CHECK-NEXT:             ResolvedNumberLiteral: '0'
// CHECK-NEXT:             ResolvedDeclRefExpr: @({{.*}}) y
// CHECK-NEXT:         ResolvedGroupingExpr:
// CHECK-NEXT:           ResolvedBinaryOperator: '||'
// CHECK-NEXT:             ResolvedNumberLiteral: '1'
// CHECK-NEXT:             ResolvedDeclRefExpr: @({{.*}}) x

fn unaryNonConst(): number {
    var x: number = 2.1;

    return !x;
}
// CHECK:    ResolvedReturnStmt
// CHECK-NEXT:      ResolvedUnaryOperator: '!'
// CHECK-NEXT:        ResolvedDeclRefExpr: @({{.*}}) x

fn ret(): number {
    return 1.0;
}

fn call(): void {
    if !ret() {
        return;
    }
}
// CHECK:    ResolvedIfStmt
// CHECK-NEXT:      ResolvedUnaryOperator: '!'
// CHECK-NEXT:        ResolvedCallExpr: @({{.*}}) ret
// CHECK-NEXT:      ResolvedBlock
// CHECK-NEXT:        ResolvedReturnStmt

fn lhsKnownRhsNot(y: number): number {
    return 1.0 && y;
}
// CHECK:    ResolvedReturnStmt
// CHECK-NEXT:      ResolvedBinaryOperator: '&&'
// CHECK-NEXT:        ResolvedNumberLiteral: '1'
// CHECK-NEXT:        ResolvedDeclRefExpr: @({{.*}}) y

fn lhsUnknownRhsFalse(x: number): number {
    return x && 0.0;
}
// CHECK:    ResolvedReturnStmt
// CHECK-NEXT:      ResolvedBinaryOperator: '&&'
// CHECK-NEXT:        ResolvedDeclRefExpr: @({{.*}}) x
// CHECK-NEXT:        ResolvedNumberLiteral: '0'

fn lhsUnknownRhsTrue(x: number): number {
    return x || 1.0;
}
// CHECK:    ResolvedReturnStmt
// CHECK-NEXT:      ResolvedBinaryOperator: '||'
// CHECK-NEXT:        ResolvedDeclRefExpr: @({{.*}}) x
// CHECK-NEXT:        ResolvedNumberLiteral: '1'

fn lhsUnknownRhsFalseOr(x: number): number {
    return x || 0.0;
}
// CHECK:    ResolvedReturnStmt
// CHECK-NEXT:      ResolvedBinaryOperator: '||'
// CHECK-NEXT:        ResolvedDeclRefExpr: @({{.*}}) x
// CHECK-NEXT:        ResolvedNumberLiteral: '0'

fn main(): void {}
