// RUN: cxx-comp %s -o expressions && ./expressions | grep -Plzx '1\n-1\n-9\n'
fn foo(x: number): number {
    if x < (0.0 - 5.0) {
        return (0.0 - 1.0);
    } else if x > 5.0 {
        return 1.0;
    }

    let x: number = 2.0 + 3.0;
    
    var y: number = !x;
    
    y = 3.0 * !y / (1.5 + 1.5);

    return y - 10.0;
}
// CHECK-NEXT: define double @foo(double %x) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %retval = alloca double, align 8
// CHECK-NEXT:   %x1 = alloca double, align 8
// CHECK-NEXT:   %x6 = alloca double, align 8
// CHECK-NEXT:   %y = alloca double, align 8
// CHECK-NEXT:   store double %x, ptr %x1, align 8
// CHECK-NEXT:   %0 = load double, ptr %x1, align 8
// CHECK-NEXT:   %1 = fcmp olt double %0, -5.000000e+00
// CHECK-NEXT:   %to.double = uitofp i1 %1 to double
// CHECK-NEXT:   %to.bool = fcmp one double %to.double, 0.000000e+00
// CHECK-NEXT:   br i1 %to.bool, label %if.true, label %if.false
// CHECK-EMPTY: 
// CHECK-NEXT: if.true:                                          ; preds = %entry
// CHECK-NEXT:   store double -1.000000e+00, ptr %retval, align 8
// CHECK-NEXT:   br label %return
// CHECK-EMPTY: 
// CHECK-NEXT: if.false:                                         ; preds = %entry
// CHECK-NEXT:   %2 = load double, ptr %x1, align 8
// CHECK-NEXT:   %3 = fcmp ogt double %2, 5.000000e+00
// CHECK-NEXT:   %to.double2 = uitofp i1 %3 to double
// CHECK-NEXT:   %to.bool3 = fcmp one double %to.double2, 0.000000e+00
// CHECK-NEXT:   br i1 %to.bool3, label %if.true4, label %if.exit
// CHECK-EMPTY: 
// CHECK-NEXT: if.true4:                                         ; preds = %if.false
// CHECK-NEXT:   store double 1.000000e+00, ptr %retval, align 8
// CHECK-NEXT:   br label %return
// CHECK-EMPTY: 
// CHECK-NEXT: if.exit:                                          ; preds = <null operand!>, %if.false
// CHECK-NEXT:   br label %if.exit5
// CHECK-EMPTY: 
// CHECK-NEXT: if.exit5:                                         ; preds = %if.exit, <null operand!>
// CHECK-NEXT:   store double 5.000000e+00, ptr %x6, align 8
// CHECK-NEXT:   store double 0.000000e+00, ptr %y, align 8
// CHECK-NEXT:   %4 = load double, ptr %y, align 8
// CHECK-NEXT:   %to.bool7 = fcmp one double %4, 0.000000e+00
// CHECK-NEXT:   %5 = xor i1 %to.bool7, true
// CHECK-NEXT:   %to.double8 = uitofp i1 %5 to double
// CHECK-NEXT:   %6 = fmul double 3.000000e+00, %to.double8
// CHECK-NEXT:   %7 = fdiv double %6, 3.000000e+00
// CHECK-NEXT:   store double %7, ptr %y, align 8
// CHECK-NEXT:   %8 = load double, ptr %y, align 8
// CHECK-NEXT:   %9 = fsub double %8, 1.000000e+01
// CHECK-NEXT:   store double %9, ptr %retval, align 8
// CHECK-NEXT:   br label %return
// CHECK-EMPTY: 
// CHECK-NEXT: return:                                           ; preds = <null operand!>, %if.exit5, %if.true4, %if.true
// CHECK-NEXT:   %10 = load double, ptr %retval, align 8
// CHECK-NEXT:   ret double %10
// CHECK-NEXT: }

fn main(): void {
    println(foo(6.0));
    println(foo(0.0 - 6.0));
    println(foo(1.0));
}
