// RUN: cxx-comp %s -llvm-dump 2>&1 | FileCheck %s
// RUN: cxx-comp %s -o cond_binop_side_effect && ./cond_binop_side_effect | grep -Plzx '1\n2\n3\n4\n5\n7\n10\n13\n14\n15\n16\n'
fn true(x: number): number {
    println(x);
    return 1.0;
}

fn false(x: number): number {
    println(x);
    return 0.0;
}

fn test2(): void {
    false(4.0) || true(5.0) || true(6.0);
}
// CHECK: define void @test2() {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %0 = call double @false(double 4.000000e+00)
// CHECK-NEXT:   %to.bool = fcmp one double %0, 0.000000e+00
// CHECK-NEXT:   br i1 %to.bool, label %or.merge, label %or.lhs.false
// CHECK-EMPTY: 
// CHECK-NEXT: or.rhs:                                           ; preds = %or.lhs.false
// CHECK-NEXT:   %1 = call double @true(double 6.000000e+00)
// CHECK-NEXT:   %to.bool2 = fcmp one double %1, 0.000000e+00
// CHECK-NEXT:   br label %or.merge
// CHECK-EMPTY: 
// CHECK-NEXT: or.merge:                                         ; preds = %or.rhs, %or.lhs.false, %entry
// CHECK-NEXT:   %2 = phi i1 [ %to.bool2, %or.rhs ], [ true, %or.lhs.false ], [ true, %entry ]
// CHECK-NEXT:   %to.double = uitofp i1 %2 to double
// CHECK-NEXT:   ret void
// CHECK-EMPTY: 
// CHECK-NEXT: or.lhs.false:                                     ; preds = %entry
// CHECK-NEXT:   %3 = call double @true(double 5.000000e+00)
// CHECK-NEXT:   %to.bool1 = fcmp one double %3, 0.000000e+00
// CHECK-NEXT:   br i1 %to.bool1, label %or.merge, label %or.rhs
// CHECK-NEXT: }

fn main(): void {
    test2();
}
