// RUN: yl %s -llvm-dump 2>&1 | FileCheck %s
// RUN: yl %s -o while_empty_exit_ret && ./while_empty_exit_ret | grep -Plzx '2\n'
fn foo(x: number): void {
    var i: number = x;

    while i > 1.0 {
        println(i);
        i = i - 1.0;
    }
}

fn main(): void {
    foo(2.0);
}
// CHECK: define void @foo(double %x) {
// CHECK-NEXT: entry:
// CHECK-NEXT:   %x1 = alloca double, align 8
// CHECK-NEXT:   %i = alloca double, align 8
// CHECK-NEXT:   store double %x, ptr %x1, align 8
// CHECK-NEXT:   %0 = load double, ptr %x1, align 8
// CHECK-NEXT:   store double %0, ptr %i, align 8
// CHECK-NEXT:   br label %while.cond
// CHECK-EMPTY:
// CHECK-NEXT: while.cond:                                       ; preds = %while.body, %entry
// CHECK-NEXT:   %1 = load double, ptr %i, align 8
// CHECK-NEXT:   %2 = fcmp ogt double %1, 1.000000e+00
// CHECK-NEXT:   %to.double = uitofp i1 %2 to double
// CHECK-NEXT:   %to.bool = fcmp one double %to.double, 0.000000e+00
// CHECK-NEXT:   br i1 %to.bool, label %while.body, label %while.exit
// CHECK-EMPTY:
// CHECK-NEXT: while.body:                                       ; preds = %while.cond
// CHECK-NEXT:   %3 = load double, ptr %i, align 8
// CHECK-NEXT:   call void @println(double %3)
// CHECK-NEXT:   %4 = load double, ptr %i, align 8
// CHECK-NEXT:   %5 = fsub double %4, 1.000000e+00
// CHECK-NEXT:   store double %5, ptr %i, align 8
// CHECK-NEXT:   br label %while.cond
// CHECK-EMPTY:
// CHECK-NEXT: while.exit:                                       ; preds = %while.cond
// CHECK-NEXT:   ret void
// CHECK-NEXT: }
