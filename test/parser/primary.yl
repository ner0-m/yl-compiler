// RUN: cxx-comp %s -ast-dump 2>&1 | FileCheck %s

fn main(): void {
    // CHECK: [[# @LINE + 1 ]]:5: error: expected expression
    .0;

    // CHECK: [[# @LINE + 1 ]]:5: error: expected expression
    0.;

    // CHECK: [[# @LINE + 1 ]]:6: error: expected expression
    ();

    // CHECK: [[# @LINE + 1 ]]:10: error: expected expression
    ((((()))));

    // CHECK: [[# @LINE + 1 ]]:11: error: expected ')'
    ((1.0);

    // CHECK: [[# @LINE + 1 ]]:7: error: expected expression
    a(;

    // CHECK: [[# @LINE + 1 ]]:8: error: expected ')'
    a(x;

    // CHECK: [[# @LINE + 1 ]]:7: error: expected expression
    a(,);

    // CHECK: [[# @LINE + 1 ]]:9: error: expected expression
    a(x,;

    1;
    // CHECK: NumberLiteral: '1'

    1.0;
    // CHECK: NumberLiteral: '1.0'
    
    (2.0);
    // CHECK: GroupingExpr:
    // CHECK-NEXT:   NumberLiteral: '2.0'

    (((((2.0)))));
    // CHECK: GroupingExpr:
    // CHECK-NEXT:   GroupingExpr:
    // CHECK-NEXT:     GroupingExpr:
    // CHECK-NEXT:       GroupingExpr:
    // CHECK-NEXT:         GroupingExpr:
    // CHECK-NEXT:           NumberLiteral: '2.0'

    a;
    // CHECK: DeclRefExpr: a

    a();
    // CHECK: CallExpr:
    // CHECK-NEXT:   DeclRefExpr: a

    a(x,);
    // CHECK: CallExpr:
    // CHECK-NEXT:   DeclRefExpr: a
    // CHECK-NEXT:   DeclRefExpr: x

    a(1.0, 2.0,);
    // CHECK: CallExpr:
    // CHECK-NEXT:   DeclRefExpr: a
    // CHECK-NEXT:   NumberLiteral: '1.0'
    // CHECK-NEXT:   NumberLiteral: '2.0'

    a(1.0, 2.0);
    // CHECK: CallExpr:
    // CHECK-NEXT:   DeclRefExpr: a
    // CHECK-NEXT:   NumberLiteral: '1.0'
    // CHECK-NEXT:   NumberLiteral: '2.0'
}
